{
  "hash": "89497d7a1e4289d90eab5759cd46b65f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Fairness-Aware Machine Learning with ![](../img/Rlogo.png){width=60px}\"\nsubtitle: <span style=\"color:#2C3E50\">11.118/11.218 Applied Data Science for Cities</span>\ndate: \"Last Updated 2025-08-08\"\nformat: html\neditor: visual\nexecute: \n  warning: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(caret)\nlibrary(mlr3fairness)\n```\n:::\n\n\n# Data and Disputes\n\nCOMPAS (Correctional Offender Management Profiling for Alternative Sanctions) is a popular commercial algorithm used by judges and parole officers for scoring criminal defendant’s likelihood of reoffending (recidivism). It has been shown that the algorithm is biased in favor of white defendants, and against black inmates, based on a two-year follow up study (i.e who actually committed crimes or violent crimes after 2 years) by [ProPublica](https://www.propublica.org/article/how-we-analyzed-the-compas-recidivism-algorithm). The pattern of mistakes, as measured by precision/sensitivity is notable.\n\nThis dataset is frequently used to study machine learning bias and is not readily available through [`mlr3fairness`](https://search.r-project.org/CRAN/refmans/mlr3fairness/html/compas.html) package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"compas\", package = \"mlr3fairness\")\n```\n:::\n\n\nThe `decile_score` column represents COMPAS’s predicted risk of recidivism, ranging from 1 to 10. The `score_text` column maps these scores into categories: scores from 1 to 4 are labeled as Low risk, 5 to 7 as Medium risk, and 8 to 10 as High risk.\n\nThe `two_year_recid` column indicates whether the defendant was rearrested within two years.\n\nTo simplify our analysis, we’ll create two new columns. The first, **predicted**, will be \"Yes\" if `score_text` is High or Medium, and \"No\" if it is Low. The second, **actual**, will be \"Yes\" if `two_year_recid` is 1 and \"No\" if it is 0.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Data preprocess\ncompas <- compas |> \n  mutate(\n    predicted = case_when(\n      score_text %in% c(\"High\", \"Medium\") ~ \"yes\",\n      score_text %in% c(\"Low\") ~ \"no\"\n    ),\n    actual = factor(two_year_recid, \n                    levels = c(0, 1), \n                    labels = c(\"no\", \"yes\"))\n  )\n```\n:::\n\n\n## **Model Accuracy**\n\nHow well does COMPAS predict reoffending? One way to measure this is by checking the model’s accuracy. Since this is a classification problem with \"Yes\" or \"No\" outcomes, accuracy is defined as the proportion of correct predictions: both when the model predicts reoffending and the person does reoffend, and when it predicts no reoffending and the person does not.\n\nIn other words, accuracy tells us how often the model is correct overall.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrect_predictions <- compas |>\n  filter(\n    (predicted == \"yes\" & actual == \"yes\") |\n    (predicted == \"no\" & actual == \"no\")\n)\n\naccuracy <- nrow(correct_predictions) / nrow(compas)\naccuracy\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.6607259\n```\n\n\n:::\n:::\n\n\nIn our case, the accuracy of the COMPAS model is about 0.66, meaning it makes the correct prediction 66% of the time. It's better than random guessing (50%), although only moderately.\n\n## Confusion Matrix\n\nAccuracy is not the best metrics for evaluating classification models, as it doesn’t show how it makes mistakes. It treats a **false positive** (predicting someone will reoffend when they won’t) the same as a **false negative** (predicting someone won’t reoffend when they will). In practice, these errors can have very different consequences.\n\nConfusion matrix breaks down the types of correct and incorrect predictions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# True Positive: predicted recidivism, actually recidivated\nTP <- sum(compas$predicted == \"yes\" & compas$actual == \"yes\")  \n\n# True Negative: predicted no recidivism, didn't recidivate\nTN <- sum(compas$predicted == \"no\" & compas$actual == \"no\")  \n\n# False Positive: predicted recidivism, didn't recidivate\nFP <- sum(compas$predicted == \"yes\" & compas$actual == \"no\")  \n\n# False Negative: predicted no recidivism, actually recidivated\nFN <- sum(compas$predicted == \"no\" & compas$actual == \"yes\")  \n\n# Create a matrix manually\nconf_matrix <- matrix(c(TN, FN, FP, TP),\n                      nrow = 2,\n                      dimnames = list(Prediction = c(\"N\", \"P\"),\n                                      Reference = c(\"N\", \"P\")))\nconf_matrix\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Reference\nPrediction    N    P\n         N 2345 1018\n         P 1076 1733\n```\n\n\n:::\n:::\n\n\nThis matrix reads:\n\n```         \n           Reference (Actual)\nPrediction     0      1\n         -----------------\n      0 |   TN     FN\n      1 |   FP     TP\n```\n\nRecall that a perfect classifier would only have non-zero values on it's main diagonal (TN and TP).\n\nTo put this result in our context, among the 3,421 (first column) people who actually did not reoffend, 1,076 were misclassified. That’s about 31.5%, or nearly one-third of non-reoffenders were flagged as high risk. This is called the **False Positive Rate (FPR)**: the proportion of non-reoffenders incorrectly predicted as reoffenders.\n\n## Breaking down by racial groups\n\nIf we take a closer look and break down the confusion matrix by racial groups, we will see that the model’s errors are not evenly distributed.\n\n[The analysis by Propublica](https://www.propublica.org/article/how-we-analyzed-the-compas-recidivism-algorithm) has this quote:\n\n> \"Black defendants were often predicted to be at a higher risk of recidivism than they actually were. Our analysis found that black defendants who did not recidivate over a two-year period were nearly twice as likely to be misclassified as higher risk compared to their white counterparts\"\n\nThis means the **FPR**—predicting someone will reoffend when they won’t—is significantly higher for Black defendants compared to white defendants.\n\nWe’ll now reproduce this analysis ourselves.\n\nTo make this easier and reusable, we’ll define a function that generates a confusion matrix for any filtered dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define a function to calculate confusion matrix cells by race\nconfusion_by_race <- function(df, race_name) {\n  df_race <- df %>% filter(race == race_name)\n  \n  TP <- sum(df_race$predicted == \"yes\" & df_race$actual == \"yes\")\n  TN <- sum(df_race$predicted == \"no\" & df_race$actual == \"no\")\n  FP <- sum(df_race$predicted == \"yes\" & df_race$actual == \"no\")\n  FN <- sum(df_race$predicted == \"no\" & df_race$actual == \"yes\")\n  \n  return(c(TP = TP, TN = TN, FP = FP, FN = FN))\n}\n```\n:::\n\n\nThen calculate the confusion matrix for Black and White population, separately.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Remove other objects from the workspace to start fresh\nrm(list = setdiff(ls(), c(\"compas\", \"confusion_by_race\")))\n\n# Calculate for Black affenders\nb_vals <- confusion_by_race(compas, \"African-American\")\nb_fpr <- b_vals[\"FP\"]/(b_vals[\"FP\"]+b_vals[\"TN\"])\n\n# Calculate for White affenders\nw_vals <- confusion_by_race(compas, \"Caucasian\")\nw_fpr <- w_vals[\"FP\"]/(w_vals[\"FP\"]+ w_vals[\"TN\"])\n\n# Print our conclusions\nstr_glue(\n  \"Black defendants who did not recidivate over a two-year period \",\n  \"were nearly twice as likely to be misclassified as higher risk \",\n  \"compared to their white counterparts ({round(b_fpr*100)}% vs. {round(w_fpr*100)}%).\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nBlack defendants who did not recidivate over a two-year period were nearly twice as likely to be misclassified as higher risk compared to their white counterparts (42% vs. 22%).\n```\n\n\n:::\n:::\n\n\nPropublica has another quote:\n\n> \"White defendants were often predicted to be less risky than they were. Our analysis found that white defendants who re-offended within the next two years were mistakenly labeled low risk almost twice as often as black re-offenders\"\n\nThis points to another type of model error: **False Negative Rate (FNR)**. It tells us, among all people who actually reoffended (the actual positives), how many were missed by the model (predicted as low risk).\n\nGoing back to our matrix, **FNR** is saying, out of all the actual reoffenders (second column), how many were incorrectly predicted as \"no\" (FN)\n\n```         \n           Reference (Actual)\nPrediction     0      1\n         -----------------\n      0 |   TN     FN\n      1 |   FP     TP\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate for Black reaffenders\nb_fnr <- b_vals[\"FN\"]/(b_vals[\"FN\"]+b_vals[\"TP\"]) \n\n# Calculate for White reaffenders\nw_fnr <- w_vals[\"FN\"]/(w_vals[\"FN\"]+ w_vals[\"TP\"])\n\nstr_glue(\n  \"White defendants who reoffend were given more lenient risk scores. \\n\",\n  \"{round(w_fnr*100)}% of White defendants were wrongly labeled as low risk compared with {round(b_fnr*100)}% for Black defendants.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nWhite defendants who reoffend were given more lenient risk scores. \n50% of White defendants were wrongly labeled as low risk compared with 28% for Black defendants.\n```\n\n\n:::\n:::\n\n\nSteif's book refers to this kind of pattern as **disparate impact**: when a decision-making process seems neutral on the surface but still results in unequal outcomes for certain groups. In this case, the COMPAS model tends to over-predict risk for Black defendants (higher False Positive Rate) and under-predict for White defendants (higher False Negative Rate), leading to unequal treatment, even though race is not explicitly used as a factor.\n\nDoes this mean the COMPAS model simply wasn’t effective? To explore this further, let’s try building our own prediction model using logistic regression and see how well it performs.\n\n# Logistic Regression\n\n## **Variable Selection**\n\nChoosing which variables to include in a regression model is a critical challenge in algorithmic decision-making. Steif’s book highlights an important tension around using features like `race` or `prior_count`.\n\nIf we include race in a multiple linear regression (MLR), the results table will show the effect of the `race` variable, which might read: “Being race X increases predicted recidivism by 0.2”. This kind of output is problematic. It means the model will consistently add 0.2 for defendants of race X. In other words, it encodes bias into the predictions.\n\nEven if you remove `race` as a predictor, the model may still \"learn\" patterns related to race, because things like `priors_count` are correlated with `race` due to historical and systemic biases in policing. Similarly, things such as redlining neighborhoods and credit scores, which are closely connected to race or income due to historical segregation and unequal access to resources, can lead algorithms to systematically make worse predictions for people from certain socioeconomic groups.\n\nWhat we can do to address this issue is broadly referred to as **Fairness-Aware Modeling**. This includes a range of strategies: understanding the data deeply, being cautious about variables that may act as proxies for protected characteristics, and applying fairness techniques such as adjusting decision thresholds. We’ll try to build and improve a logistic regression model using some of these ideas.\n\n## **Model Building**\n\nWe’ll now repeat the modeling workflow you’ve used in the past two classes. We’ll exclude `race` from the predictors, but include `priors_count`, while acknowledging that it may act as a problematic proxy for race.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodeldata <- compas \n\nset.seed(42)\ntrain_index <- createDataPartition(\n  y = modeldata$two_year_recid,\n  p = 0.7,\n  list = FALSE\n)\n\ntrain_data <- modeldata[train_index, ]\ntest_data  <- modeldata[-train_index, ]\n```\n:::\n\n\nIn the `train()` function, we set `method = \"glm\"` to specify that we’re using a generalized linear model. `family = \"binomial\"` indicates that the outcome variable is binary. The `trainControl()` function is set up as before to perform five-fold cross-validation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(42)\nlogit_model <- train(\n  actual ~ age + sex + c_charge_degree + priors_count + length_of_stay, \n  data = train_data,\n  method = \"glm\",        \n  family = \"binomial\",\n  trControl = trainControl(method = \"cv\", number = 5)\n)\n```\n:::\n\n\n## **Our Result**\n\nNow we use the trained model to predict the classes for the test dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npred_class <- predict(logit_model, newdata = test_data)\n```\n:::\n\n\nAfter generating these predicted classes, we attach them back to the test dataset for the subsequent confusion matrix calculation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# attach to the test data\ntest_pred_class <- test_data %>%\n  mutate(predicted = pred_class)\n```\n:::\n\n\nReuse our previous function `confusion_by_race` to calculate FPR by race:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb_vals <- confusion_by_race(test_pred_class, \"African-American\")\nb_fpr <- b_vals[\"FP\"]/(b_vals[\"FP\"]+b_vals[\"TN\"])\n\nw_vals <- confusion_by_race(test_pred_class, \"Caucasian\")\nw_fpr <- w_vals[\"FP\"]/(w_vals[\"FP\"]+ w_vals[\"TN\"])\n\nstr_glue(\n  \"Black defendants who did not recidivate but misclassified as higher risk: {round(b_fpr*100)}%. \\n\",\n  \"White defendants who did not recidivate but misclassified as higher risk: {round(w_fpr*100)}%).\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nBlack defendants who did not recidivate but misclassified as higher risk: 34%. \nWhite defendants who did not recidivate but misclassified as higher risk: 16%).\n```\n\n\n:::\n:::\n\n\nAlthough our model has lower errors rate than COMPAS, it produces very similar results and shows the same kind of disparities that are roughly twice as large.\n\n## Threshold Tuning\n\nWe can’t undo the historical patterns that shaped the data, and we often can’t completely avoid using variables that carry implicit bias, especially they carry predictive power. So what can we do?\n\nIn logistic regression, the model doesn’t directly predict a “yes” or “no” outcome. It predicts a probability between 0 and 1 that an observation belongs to the positive class. A final classification decision still needs to be made. By default, the threshold is set at 0.5, meaning if the predicted probability is greater than 0.5, the case is classified as “yes” (positive), otherwise “no” (negative).\n\nBy setting `type = \"prob\"` in the following code, we get **predicted probabilities** instead of class labels. This lets us adjust the decision threshold. For example, classifying a case as \"yes\" only if the probability is above 0.7, rather than the default 0.5. Changing the threshold affects how predictions fall into true or false positives and negatives, which in turn impacts error rates and fairness.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This is the probability result\npred_probs <- predict(logit_model, newdata = test_data, type = \"prob\")\n```\n:::\n\n\nNow let's set different classification thresholds for different groups!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Attach pred_probs back to test data\ntest_pred_prob <- test_data %>%\n  mutate(pred_prob = pred_probs$yes)\n\n# Define threshold we want to use\nthresholds <- list(\n  African_American = 0.7,\n  Caucasian = 0.6\n)\n\n# Create a new \"predicted\" column based on group-specific thresholds.\n# For African-American and Caucasian individuals, apply separate thresholds.\n# For all others, use the default threshold of 0.5.\ntest_pred_prob <- test_pred_prob %>%\n  mutate(predicted = case_when(\n    race == \"African-American\" & pred_prob > thresholds$African_American ~ \"yes\",\n    race == \"African-American\" & pred_prob <= thresholds$African_American ~ \"no\",\n    race == \"Caucasian\" & pred_prob > thresholds$Caucasian ~ \"yes\",\n    race == \"Caucasian\" & pred_prob <= thresholds$Caucasian ~ \"no\",\n    pred_prob > 0.5 ~ \"yes\",\n    TRUE ~ \"no\"\n  ))\n\n# three metrics, FNR, FPR and Accuracy for both race\n```\n:::\n\n\nNow that we’ve applied group-specific thresholds, we calculate and compare performance metrics: **False Positive Rate (FPR)**, **False Negative Rate (FNR)**, and **Accuracy**, for African-American and Caucasian defendants.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb_vals <- confusion_by_race(test_pred_prob, \"African-American\")\nb_fpr <- b_vals[\"FP\"] / (b_vals[\"FP\"] + b_vals[\"TN\"])\nb_fnr <- b_vals[\"FN\"] / (b_vals[\"FN\"] + b_vals[\"TP\"])\nb_acc <- (b_vals[\"TP\"] + b_vals[\"TN\"]) / sum(b_vals)\n\nw_vals <- confusion_by_race(test_pred_prob, \"Caucasian\")\nw_fpr <- w_vals[\"FP\"] / (w_vals[\"FP\"] + w_vals[\"TN\"])\nw_fnr <- w_vals[\"FN\"] / (w_vals[\"FN\"] + w_vals[\"TP\"])\nw_acc <- (w_vals[\"TP\"] + w_vals[\"TN\"]) / sum(w_vals)\n\n# Print results\nstr_glue(\n  \"Black Defendants:\\n\",\n  \"  FPR: {round(b_fpr * 100, 1)}%\\n\",\n  \"  FNR: {round(b_fnr * 100, 1)}%\\n\",\n  \"  Accuracy: {round(b_acc * 100, 1)}%\\n\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nBlack Defendants:\nFPR: 9.8%\nFNR: 72.5%\nAccuracy: 56.8%\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_glue(\n  \"White Defendants:\\n\",\n  \"  FPR: {round(w_fpr * 100, 1)}%\\n\",\n  \"  FNR: {round(w_fnr * 100, 1)}%\\n\",\n  \"  Accuracy: {round(w_acc * 100, 1)}%\\n\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nWhite Defendants:\nFPR: 5%\nFNR: 80.2%\nAccuracy: 65.6%\n```\n\n\n:::\n:::\n\n\nSteif's book introduced a few guildlines for an \"equity threshold\",\n\n-   Minimize differences in False Positive Rates (FPR) and False Negative Rates (FNR) between racial groups, while keeping both rates relatively low.\n-   Minimize differences in Accuracy rates between racial groups, while keeping the overall Accuracy high.\n\nHow would you interpret our new results? Would you consider this a better and more equitable model, or not? As discussed in the book, expect trade-offs: no single threshold will perfectly balance accuracy and fairness across all groups, which reflects real-world complexity in social data.\n\n# Lab Report\n\nBuilding on what we’ve learned so far, you will continue exploring how adjusting decision thresholds can help build fairness-aware machine learning models.\n\nPreviously, we tested one possible pair of thresholds (0.7 for Black defendants and 0.6 for White defendants) to see how it affected fairness metrics. But that was just one possibility. **Are there other threshold pairs that might lead to better fairness or overall performance? How would you find them?**\n\nOne powerful approach is to use sensitivity analysis: systematically testing a range of threshold values (e.g., from 0.1 to 1.0) for both groups and observing how model behavior changes.\n\n### **Your Task**\n\nCraft a **strategy** to explore and compare different threshold combinations. Think like a data scientist advising a team of stakeholders: you’ll need to experiment, visualize, interpret, and explain.\n\n### **What to Do**\n\n1.  **Design your approach.**\\\n    Decide how you want to vary the thresholds (e.g., in 0.1 increments from 0.1 to 1.0) and how many combinations to test.\n2.  **Run your analysis.**\\\n    For each pair, calculate FPR, FNR, and Accuracy for both racial groups. You can write a loop to do this efficiently.\n3.  **Communicate your findings.**\\\n    Use both **tables** and **visualizations** to show how the metrics change. Good options include:\n    -    A results **table** showing values across threshold pairs\n\n    -   **Line plots** or **heatmaps** to reveal patterns and trade-offs visually\n4.   **Reflect and explain.**\\\n    Choose a recommended threshold pair based on your analysis. Please include a 300-500 word write-up to explain what you recommend and why, any trade-offs involved and how you’d explain it to a general audience.\n\nThere’s no perfect answer. This is about exploring, reasoning, and practicing fairness-aware modeling in action.\n\nPlease include all your work in a Quarto document and submit your Rendered HTML file to Canvas by the end of day, Tuesday, Sep 23.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}