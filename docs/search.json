[
  {
    "objectID": "modules/index3.html",
    "href": "modules/index3.html",
    "title": "Module 3 Communicate Data Science",
    "section": "",
    "text": "Transform static analyses into interactive tools that invite users to explore and discover insights on their own.\n\nInteractive Map and Dashboard\nWeb-app storytelling"
  },
  {
    "objectID": "modules/index1.html",
    "href": "modules/index1.html",
    "title": "Module 1 Descriptive Data Science",
    "section": "",
    "text": "We‚Äôll explore the foundations of descriptive data science, learning how to summarize, visualize, and interpret datasets to uncover meaningful patterns.\n\nIntro to R\nUrban Science History and Data Prep\nData Manipulation and Visualization I\nData Manipulation and Visualization II"
  },
  {
    "objectID": "labs/index.html",
    "href": "labs/index.html",
    "title": "Lab Overview",
    "section": "",
    "text": "Here you‚Äôll find links and resources for each lab session:\n\nLab 1: Data Wrangling: Cambridge Building Energy\nLab 2: Making Exploratory Graphs: Opportunity Zones\nLab 3: Enhancing Visualizations: Airbnb Data\nLab 4: Spatial Analysis: Neighborhood Built Environment\nLab 5: Census Data: Describe Population Change\nLab 6: Online Map and Dashboard\nLab 7: Shiny Apps\nLab 8: Build Machine Learning Models: Predict Housing Prices\nLab 9: Tree-Based Models and Parameter Tuning\nLab 10: Fairness-Aware ML Models: Predict Recidivism"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to the 11.118/218",
    "section": "",
    "text": "Urban science draws on statistics, visualization, and spatial analysis techniques to gain deeper insights into cities and actively contribute to their development. In this course, we‚Äôll dive into the dynamic world of urban science by learning how to tell stories about cities and neighborhoods, covering a range of topics including demographic analysis, health and transportation, and using R as our primary quantitative analysis and interactive visualization tool.\n\n\n  \n    \n      Module 1Descriptive Data Science\n    \n  \n\n  \n    \n      Module 2Geospatial Data Science\n    \n  \n\n  \n    \n      Module 3Storytelling Data Science\n    \n  \n\n  \n    \n      Module 4Predictive Data Science"
  },
  {
    "objectID": "labs/lab1.html",
    "href": "labs/lab1.html",
    "title": "Get started with ",
    "section": "",
    "text": "In this exercise, we will first practice working with Quarto Document. Then we‚Äôll dive into a dataset to see how we can start pulling out useful information."
  },
  {
    "objectID": "labs/lab1.html#set-up-a-new-project",
    "href": "labs/lab1.html#set-up-a-new-project",
    "title": "Get started with ",
    "section": "Set up a New Project",
    "text": "Set up a New Project\nWe have talked about looking for files paths in class,\n\nImport dataset using direct path: ‚ùå Not recommended. Hard-coded paths break easily.\nManually set up a working directory setwd(): üòï This works fine until when you want to move your working folder or share your work. You‚Äôll constantly need to re-set the directory.\nSet up a Project: üéâ Recommended. R projects organize all files related to a project in one place and setting up relative file paths. Let‚Äôs start by setting up a project for our exercise.\n\nLaunch RStudio, then click File - New Project‚Ä¶ A dialog box will open up. Select New Directory, then New Project. Here, you can create a new folder to save everything related to this project. For example, I chose my D:/Fall25 folder and created a new folder there called Lab 1:\n\nClick the button ‚ÄúCreate Project‚Äù. R will take a second to refresh.\nThen you will see in your Files tab that you have been directed to your current working directory: D:/Fall25/Lab 1. You will also see a .Rproj file in that folder.\n\nThe .Rproj file serves as a reference point that R uses to locate all files associated with the project. If you save all files related to Lab 1 in this folder, all relative paths remain intact and consistently applied.\nNote: In future sessions, I may provide you with a project folder containing data. As long as you launch RStudio by double-clicking the .Rproj file, you will be taken directly to the project‚Äôs home directory."
  },
  {
    "objectID": "labs/lab1.html#practice-formatting-text-with-quarto",
    "href": "labs/lab1.html#practice-formatting-text-with-quarto",
    "title": "Get started with ",
    "section": "Practice formatting text with Quarto",
    "text": "Practice formatting text with Quarto\nNow go to File - New File - Quarto Document to create a new Quarto document. The prompt shown below will appear. Type in a document title (e.g.¬†Lab 1) and your name. Keep the radio button for HTML selected.\n\nYou will then see a template file. At the very top you will see the YAML (or ‚ÄúYet Another Markdown Language‚Äù) header which begins and ends with three dashes ---. The YAML header determines how your document will be rendered to your desired output format. Now it specifies the title, author, output format and text editor.\nTo get an idea of how everything works, let‚Äôs click the ‚ÄúRender‚Äù button on top of your toolbar.\nWhen prompted, give this file a name, it should be saved in the folder where your ‚Äú.Rproj‚Äù file is, as a .qmd file.\nYou will now see a formatted document in a web browser. Switch between your code and the document back and forth to see where each part of the code is placed in the rendered HTML file.\nThere can be other options specified in the YAML, particularly if you are rendering to a format other than HTML (such as pdf, or Word, see all formats).\nOn the very left of this toolbar, click the ‚ÄúSource‚Äù button to switch Markdown editing mode. These sections of text typically explain or provide context for the code and graphics, and they are formatted using Markdown syntax. For example:\n\n#: a header element.\n**: bold text.\n*: italic text.\n` : code blocks.\n\nOverall, the Visual interface looks pretty much like a Word document. There is a toolbar that allows you to edit text formats, create a bullet list, insert a link or an image, insert a code block, etc.\nNow let‚Äôs delete everything below the YAML header in this test file, so that we will start creating our own formatted report.\n\nExercise\nIn 2014, the City of Cambridge passed a local ordinance on building energy use disclosure. Spend a few moments reviewing this website to become familiar with the ordinance (in general).\nThen, add 2-3 sentences below your YAML section that explain the following:\n\nWhat does the Building Energy Use Disclosure Ordinance require?\nWhat kind of data have been compiled and where to find them?\n\nYou may edit your text either in the ‚ÄúSource‚Äù or ‚ÄúVisual‚Äù panel, or toggle between them to get familiar with both. Make sure to make gratuitous use of bold, italics, bullet points, etc. in your text.\nWhen you finish, save your file and click Render again. You can immediately see your nicely formatted document in a web browser."
  },
  {
    "objectID": "labs/lab1.html#select-selects-a-subset-of-columns.",
    "href": "labs/lab1.html#select-selects-a-subset-of-columns.",
    "title": "Get started with ",
    "section": "Select: selects a subset of columns.",
    "text": "Select: selects a subset of columns.\nIn the energy dataset, we probably don‚Äôt need all of the 67 columns. So we can make it a smaller dataset by specifying a few columns to keep.\ndataset |&gt; select(Column1, Column2)\nInsert a new code chunk in your document to select a few variables. You don‚Äôt need the copy and paste the code below, let‚Äôs type the variable names ourselves to see what shows up along the way. You can type the pipe |&gt; operator using Shift+Ctrl/Cmd+M.\nenergy |&gt;\n  select(\n    `Data Year`,\n    `BEUDO Category`,\n    Owner,\n    `Year Built`,\n    `Primary Property Type - Self Selected`,\n    `Total GHG Emissions (Metric Tons CO2e)`,\n    `Total GHG Emissions Intensity (kgCO2e/ft2)`,\n    Longitude,\n    Latitude\n  ) \nSome of the column names are surrounded by backticks (`), that‚Äôs because they include special characters or spaces (such as spaces and () ). The use of backticks is to preserve these unique names. If you just keep typing the column names, dplyr will populate the correct names for you.\nBut we want to make the columns names clean and easy to read. That‚Äôs why we usually rename the columns using snake-case naming conventions while we are making selections.\n\nenergy &lt;- energy |&gt;\n  select(\n    data_year = `Data Year`,\n    BEUDO_category = `BEUDO Category`,\n    owner = Owner,\n    year_built = `Year Built`,\n    property_type = `Primary Property Type - Self Selected`,\n    ghg_emission = `Total GHG Emissions (Metric Tons CO2e)`,\n    ghg_intensity = `Total GHG Emissions Intensity (kgCO2e/ft2)`,\n    longitude = Longitude,\n    latitude = Latitude\n  ) \n\nClick the energy variable in your Environment panel now to browse this smaller dataset that only include 9 variables, with clean column names.\nNote: &lt;- and |&gt; look quite similar but it‚Äôs important to distinguish them. |&gt; works data through functions but doesn‚Äôt store the result unless assigned. &lt;- assigns (stores) the result to a variable."
  },
  {
    "objectID": "labs/lab1.html#filter-select-a-subset-of-rows",
    "href": "labs/lab1.html#filter-select-a-subset-of-rows",
    "title": "Get started with ",
    "section": "filter: Select a subset of rows",
    "text": "filter: Select a subset of rows\nNow let‚Äôs create a new dataset that only contains energy use records from MIT buildings.\ndataset |&gt; filter(&lt;condition&gt;)\nTake a look at how we achieve this using the following code:\n{r}\nenergy |&gt; \n  filter(owner == \"MASSACHUSETTS INSTITUTE OF TECHNOLOGY\")\nResults will be showing in your console. You‚Äôll notice that some entries are missing records for total GHG emissions, which appear as NA under the ‚Äúghg_emission‚Äù and ‚Äúghg_intensity‚Äù column. If we want to simplify the dataset by keeping only the rows with valid GHG emission records, we can apply that as an additional filter condition too.\nProceed to insert a new code chunk in your document like the one below. Now we are filtering with two conditions: MIT buildings, and have emission data. We are assigning the result to a new variable ‚Äúmit_energy‚Äù.\n\nmit_energy &lt;- energy |&gt; \n  filter(owner == \"MASSACHUSETTS INSTITUTE OF TECHNOLOGY\") |&gt; \n  filter(!is.na(ghg_emission))\n\nis.na() is a function commonly used to check whether each value in a column is missing (NA). The ! is a logical negation operator, so !is.na() checks for values that are not missing. It returns TRUE for non-missing values and FALSE for missing values."
  },
  {
    "objectID": "labs/lab1.html#summarise-create-a-summary-of-your-data",
    "href": "labs/lab1.html#summarise-create-a-summary-of-your-data",
    "title": "Get started with ",
    "section": "Summarise: Create a summary of your data",
    "text": "Summarise: Create a summary of your data\nGo ahead and run the following code and observe how we got the result:\n\nmit_energy |&gt; \n  summarise(avg_emission = mean(ghg_emission))\n\n# A tibble: 1 √ó 1\n  avg_emission\n         &lt;dbl&gt;\n1        1510.\n\n\nIt calculates the average of the column ‚Äúghg_emission‚Äù of the entire dataset, and names the result ‚Äúavg_emission‚Äù. The result says, of all MIT buildings, through all years, the average annual GHG emission is ~1510 MTCO2e.\nsummarise calculates summary statistics, like a total, mean, or count, across all values in the dataset. However, when used along with group_by(), it calculates each group separately, collapsing each group into its own summary row.\nFor instance, below we calculate the average GHG emissions by data_year, which is the year when the energy record was taken.\n\nmit_energy |&gt; \n  group_by(year = data_year) |&gt; \n  summarise(avg_emission = mean(ghg_emission))\n\n# A tibble: 9 √ó 2\n   year avg_emission\n  &lt;dbl&gt;        &lt;dbl&gt;\n1  2015        1625.\n2  2016        1480.\n3  2017        1572.\n4  2018        1493.\n5  2019        1541.\n6  2020        1448.\n7  2021        1483.\n8  2022        1484.\n9  2023        1462.\n\n\nThis says, in 2015, the average annual GHG emission was ~1625 MTCO2e., and in 2016, it was ~1480 MTCO2e., so on and so forth."
  },
  {
    "objectID": "labs/lab1.html#exercise-3",
    "href": "labs/lab1.html#exercise-3",
    "title": "Get started with ",
    "section": "Exercise",
    "text": "Exercise\nInsert a few new code chunks below this one to document your code and show your results.¬†\n\nFrom the mit_energy dataset, create a subset of all non-residential buildings, that were built before the year 2000. (Hint: which function would you use?). How many such buildings are there?\nFrom the mit_energy dataset, compare the GHG emissions by property type (Hint: which column has this information?), and generate a table that shows the following results:\n\n\nYou can create this table mostly by modifying our example code, however, there are a few small things you can experiment on:\n\nThe calculated average numbers in this table are rounded to 2 decimals, how to achieve that?\nThe table is arranged in descending order based on the ‚Äúavg_emission‚Äù column, how to do that? (Hint)\n\nWe are already asking questions and finding insights from the dataset! If the results in this table look interesting/surprising/expected to you, write a few sentences describing what you see from the analysis.\n------\nLastly, and just for fun, copy and paste the following code to your document. No need to understand any of the details right now. If your R says it can‚Äôt find mapview, run the line install.packages(\"mapview\").\n\n#install.packages(\"mapview\")\nlibrary(mapview)\nmapview(\n  mit_energy |&gt; na.omit(),\n  xcol = \"longitude\", ycol = \"latitude\",\n  crs = 4326,\n  grid = FALSE\n)\n\n\n\n\n\n The dataset we have includes ‚Äúlongitude‚Äù and ‚Äúlatitude‚Äù columns, which I love, because it indicates that location information is readily available and can be visualized.\n\nNow Save, Render your document again. You have now created a nice report using Quarto!\n------\nIn this lab we have introduced how to create and develop a Quarto Document. We have also worked with a few commonly-used dplyr functions including select, filter, group_by and summarise. This is the beginning of our data wrangling and leads to the work next week."
  },
  {
    "objectID": "lectures/index.html",
    "href": "lectures/index.html",
    "title": "Lecture Overview",
    "section": "",
    "text": "Welcome to the lectures section. Click below to access individual sessions.\n\nLecture 1: Course Overview\nLecture 2: R Programming and Data Manipulation\nLecture 3: Data Transformation and Visualization I\nLecture 4: Data Transformation and Visualization II\nLecture 5: Spatial analysis with R\nLecture 6: Working with Census Data\nLecture 7: Interactive Map and Dashboard\nLecture 8: Web-based storytelling\nLecture 9: Machine Learning: Concepts & Workflow\nLecture 10: Geospatial ML and Hyperparameter Tuning\nLecture 11: Classification Models, Algorithmic Fairness\nLecture 12: Overview of Neural Networks"
  },
  {
    "objectID": "modules/index2.html",
    "href": "modules/index2.html",
    "title": "Module 2 Geospatial Data Science",
    "section": "",
    "text": "We‚Äôll learn how to import, manipulate, and visualize geospatial datasets, from simple maps to more complex spatial analyses.\n\nSpatial analysis\nMapping census data"
  },
  {
    "objectID": "modules/index4.html",
    "href": "modules/index4.html",
    "title": "Module 4 Predictive Data Science",
    "section": "",
    "text": "Introduces modern machine learning methods. We‚Äôll work on the skills to move from describing what has happened to predicting what is likely to happen next.\n\nMachine Learning: Concepts & Workflow\nML Models and Hyperparameter Tuning\nClassification, Fairness-aware ML\nOverview of Neural Networks"
  }
]